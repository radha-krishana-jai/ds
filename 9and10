// Program 9: Priority Queue using Linked List
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data, priority;
    struct Node* next;
};

struct Node* insert(struct Node* head, int data, int priority) {
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    temp->data = data;
    temp->priority = priority;
    temp->next = NULL;
    
    if (!head || priority < head->priority) {
        temp->next = head;
        return temp;
    }

    struct Node* curr = head;
    while (curr->next && curr->next->priority <= priority)
        curr = curr->next;

    temp->next = curr->next;
    curr->next = temp;
    return head;
}

struct Node* delete(struct Node* head) {
    if (!head) {
        printf("Queue is Empty\n");
        return NULL;
    }
    struct Node* temp = head;
    printf("Deleted: %d\n", temp->data);
    head = head->next;
    free(temp);
    return head;
}

void display(struct Node* head) {
    while (head) {
        printf("%d (Priority %d) -> ", head->data, head->priority);
        head = head->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = NULL;
    head = insert(head, 10, 2);
    head = insert(head, 20, 1);
    display(head);
    head = delete(head);
    display(head);
    return 0;
}

// Program 10: Binary Search Tree (BST)
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *left, *right;
};

struct Node* insert(struct Node* root, int data) {
    if (!root) {
        root = (struct Node*)malloc(sizeof(struct Node));
        root->data = data;
        root->left = root->right = NULL;
        return root;
    }
    if (data < root->data) root->left = insert(root->left, data);
    else if (data > root->data) root->right = insert(root->right, data);
    return root;
}

void inorder(struct Node* root) {
    if (root) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

void preorder(struct Node* root) {
    if (root) {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}

void postorder(struct Node* root) {
    if (root) {
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->data);
    }
}

int main() {
    struct Node* root = NULL;
    root = insert(root, 50);
    root = insert(root, 30);
    root = insert(root, 70);
    printf("Inorder: "); inorder(root);
    printf("\nPreorder: "); preorder(root);
    printf("\nPostorder: "); postorder(root);
    return 0;
}
